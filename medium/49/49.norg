* Group Anagrams

** Hash map

   brute force the whole array, for each element, check rests is the anagram, exclude matched.

   *time*: Execeeded time limit :(.

   @code go
   func generateAnagramMap(str string) map[rune]int {
     anagramMap := make(map[rune]int)
     for _, ch := range str {
       anagramMap[ch] += 1
     }
     return anagramMap
   }

   func groupAnagrams(strs []string) [][]string {
     // generate all anagram map
     anagramMap := []map[rune]int{}
     for _, str := range strs {
       anagramMap = append(anagramMap, generateAnagramMap(str))
     }
     result := [][]string{}
     skip_set := map[int]bool{}
     for i, str := range strs {
       // if str is already in skip_set, then it is already in result, skip it
       if _, ok := skip_set[i]; ok {
         continue
       }

       new_strs := []string{str}
       // make a hashmap of str
       for j, s := range strs[i+1:] {
         if _, ok := skip_set[i+j+1]; ok {
           continue
         }
         // check s is anagram of str
         if reflect.DeepEqual(anagramMap[i], anagramMap[i+j+1]) {
           // add the string to new_strs
           new_strs = append(new_strs, s)
           // skip the string
           skip_set[i+j+1] = true

         }
       }
       result = append(result, new_strs)
     }
     return result
   }

   @end

** Hash map + array
   Use char count as key, and array of string as value.

   Runtime: 24 ms, faster than 83.30% of Go online submissions for Group Anagrams.
   Memory Usage: 8.8 MB, less than 32.34% of Go online submissions for Group Anagrams.

   @code go
   func groupAnagrams(strs []string) [][]string {
     // generate all anagram map
     result := [][]string{}
     result_map := map[[26]int][]string{}
     for _, str := range strs {
       new_array := [26]int{}
       for _, r := range str {
         new_array[r-'a']++
       }
       result_map[new_array] = append(result_map[new_array], str)
     }

     for _, v := range result_map {
       result = append(result, v)
     }
     return result
   }
   @end
