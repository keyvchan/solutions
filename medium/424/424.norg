* Longest Repeating Character Replacement

** Sliding Window
   Use two pointer tracking $win_len - max_freq <= len$, then update window by extending and shrinking.

** Complexity:
   - Time: Since we need to find the most frequent character, we need to scan the whole hashmap, so time complexity is O(n). And we in a loop, so the total time complexity is O(n^2).
   - Space: we only need a hashmap to store all 26 chars frequency so the complexity is O(1)
** Result
   Runtime: 43 ms, faster than 22.70% of Go online submissions for Longest Repeating Character Replacement.
   Memory Usage: 2.4 MB, less than 70.39% of Go online submissions for Longest Repeating Character Replacement.

** Code:
   Go: {@ main.go}[main.go]
