* Interleaving String

** Up to bottom DP
*** Base case
    - Len(s1) = 0
    - Len(s2) = 0
    - Len(s3) = 0

*** Algorithm

    Use a cache to store the result of the previous calculation.
    Key is `Key{s1, s2, s3}`
    Value is `Value{bool, s1_counts, s2_counts}`

    In each recursion, we check if the `s1[0] == s3[0]` and `s2[0] == s3[0]` and decide which we should dfs or not.

*** Complexity
    - Time: O(len(s1) + len(s2) + len(s3))
    - Space: O(len(s1) * len(s2) * len(s3))

*** Result
    - Runtime: 11 ms, faster than 12.05% of Go online submissions for Interleaving String.
    - Memory Usage: 6.5 MB, less than 5.58% of Go online submissions for Interleaving String.

*** Code
    - Go: {@ main.go}

