@document.meta
title: index
description: Overview of Solved Problems
authors: keyv
categories: 
created: 2022-7-01
updated: 2022-11-10
version: 0.0.15
@end

* Index

** Algorithm

*** Array and Hash
    - [x] {:easy/217/217:* Contains Duplicate}[Contains Duplicate]
    - [x] {:easy/219/219:* Contains Duplicate II}[Contains Duplicate II]
    - [x] {:easy/2255/2255:* Count Prefixes of a Given String}[Count Prefixes of a Given String] 
    - [x] {:easy/1160/1160:* Find Words That Can be Formed Characters}[Find Words That Can be Formed Characters] 
    - [x] {:easy/242/242:* Valid Anagram}[Valid Anagram]
    - [x] {:easy/2068/2068:* Check Whether Two Strings Are Almost Equivalent}[Check Whether Two Strings Are Almost Equivalent]
    - [x] {:easy/1/1:* Two Sum}[Two Sum]
    - [x] {:medium/49/49:* Group Anagrams}[Group Anagrams]
    - [x] {:medium/347/347:* Top K Frequent}[Top K Frequent]
    - [x] {:medium/238/238:* Product of Array Except Self}[Product of Array Except Self]
    - [-] {:medium/36/36:* Valid Sudoku}[Valid Sudoku] 
    - [-] {:medium/271/271:* Encode and Decode Strings}[Encode and Decode Strings] 
    - [x] {:medium/128/128:* Longest Consecutive Sequence}[Longest Consecutive Sequence] 
    - [ ] {:easy/88/88:* Merge Sorted Array}[Merge Sorted Array]
    - [x] {:medium/451/451:* Sort Characters By Frequency}[Sort Characters By Frequency] 
    - [x] {:easy/26/26:* Remove Duplicates from Sorted Array}[Remove Duplicates from Sorted Array]
    - [x] {:medium/80/80:* Remove Duplicates from Sorted Array II}[Remove Duplicates from Sorted Array II]
    - [x] {:easy/1389/1389:* Create Target Array in the Given Order}[Create Target Array in the Given Order]
    - [-] {:medium/916/916:* Word Subsets}[Word Subsets]
    - [-] {:medium/848/848:* Shifting Letters}[Shifting Letters]
    - [x] {:medium/1387/1387:* Sort Integers by The Power Value}[Sort Integers by The Power Value]
    - [x] {:easy/389/389:* Find the Difference}[Find the Difference]
    - [x] {:easy/599/599:* Minimum Index Sum of Two Lists}[Minimum Index Sum of Two Lists]
    - [x] {:easy/14/14:* Longest Common Prefix}[Longest Common Prefix]
    - [-] {:medium/152/152:* Maximum Product Subarray}[Maximum Product Subarray]
    - [x] {:easy/804/804:* Unique Morse Code Words}[Unique Morse Code Words]
    - [x] {:easy/169/169:* Majority Element}[Majority Element]
    - [x] {:medium/2149/2149:* Rearrange Array Elements by Sign}[Rearrange Array Elements by Sign]
    - [x] {:easy/383/383:* Ransom Note}[Ransom Note]
    - [-] {:medium/838/838:* Push Dominoes}[Push Dominoes]
    - [x] {:medium/54/54:* Spiral Matrix}[Spiral Matrix]
    - [-] {:medium/151/151:* Reverse Words in a String }[Reverse Words in a String ]
    - [x] {:hard/41/41:* First Missing Positive}[First Missing Positive]
    - [x] {:easy/2367/2367:* Number of Arithmetic Triplets }[Number of Arithmetic Triplets ]
    - [x] {:medium/2161/2161:* Partition Array According to Given Pivot}[Partition Array According to Given Pivot]
    - [x] {:medium/1980/1980:* Find Unique Binary String}[Find Unique Binary String]
    - [-] {:medium/1996/1996:* The Number of Weak Characters in the Game}[The Number of Weak Characters in the Game]
    - [-] {:medium/334/334:* Increasing Triplet Subsequence}[Increasing Triplet Subsequence]
    - [x] {:easy/1544/1544:* Make The String Great}[Make The String Great]

*** 2D Array
    - [x] {:easy/867/867:* Transpose Matrix}[Transpose Matrix]
    - [-] {:medium/304/304:* Range Sum Query 2D - Immutable}[Range Sum Query 2D - Immutable]

*** Two Pointers
    - [x] {:easy/392/392:* Is Subsequence}[Is Subsequence] 
    - [-] {:medium/792/792:* Number of Matching Subsequences}[Number of Matching Subsequences]
    - [-] {:easy/125/125:* Valid Palindrome}[Valid Palindrome]
    - [-] {:medium/167/167:* Two Sum II - Input Array is Sorted}[Two Sum II - Input Array is Sorted] 
    - [ ] {:medium/15/15:* Three Sum}[Three Sum]
    - [-] {:medium/11/11:* Container With Most Water}[Container With Most Water]
    - [x] {:hard/42/42:* Trapping Rain Water}[Trapping Rain Water]
    - [x] {:medium/2130/2130:* Maximum Twin Sum of a Linked List}[Maximum Twin Sum of a Linked List]
    - [x] {:medium/1877/1877:* Minimize Pair Sum in Array}[Minimize Pair Sum in Array]

*** Sliding Window
    - [ ] {:medium/3/3:* Longest Substring Without Repeating Characters}[Longest Substring Without Repeating Characters]
    - [ ] {:medium/424/424:* Longest Repeating Character Replacement}[Longest Repeating Character Replacement]
    - [ ] {:medium/567/567:* Permutation in String}[Permutation in String]
    - [ ] {:medium/1461/1461:* Check If a String Contains All Binary Codes of Size K}[Check If a String Contains All Binary Codes of Size K]
    #contexts Fixed Window
    - [x] {:medium/1343/1343:* Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold}[Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold]
    #contexts Variable Window
    - [x] {:easy/485/485:* Max Consecutive Ones}[Max Consecutive Ones]
    - [x] {:medium/1004/1004:* Max Consecutive Ones III}[Max Consecutive Ones III]

*** Stack
    - [x] {:easy/20/20:* Valid Parentheses}[Valid Parentheses]
    - [x] {:easy/155/155:* Min Stack}[Min Stack]
    - [ ] {:medium/150/150:* Evaluate Reverse Polish Notation}[Evaluate Reverse Polish Notation]
    - [x] {:medium/22/22:* Generate Parentheses}[Generate Parentheses]
    - [-] {:739:* Daily Temeratures}[Daily Temeratures]
    - [ ] {:medium/853/853:* Car Fleet}[Car Fleet]
    - [x] {:medium/946/946:* Validate Stack Sequences}[Validate Stack Sequences]
    - [x] {:medium/82/82:* Remove Duplicates from Sorted Linked List II}[Remove Duplicates from Sorted Linked List II]
    #contexts Monotonic Stack
    - [-] {:medium/456/456:* 132 Pattern}[132 Pattern]
    - [-] {:easy/1475/1475:* Final Prices With a Special Discount in a Shop}[Final Prices With a Special Discount in a Shop]
    - [x] {:easy/1047/1047:* Remove All Adjacent Duplicates In String}[Remove All Adjacent Duplicates In String]
    - [x] {:medium/1209/1209:* Remove All Adjacent Duplicates In String II}[Remove All Adjacent Duplicates In String II]

*** Sort
    #contexts = [pigeonhole sorting]
    - [x] {:medium/1465/1465:* Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts}[Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts] 
    - [-] {:hard/164/164:* Maximum Gap}[Maximum Gap] 

*** Binary Search
    - [x] {:easy/704/704:* Binary Search}[Binary Search]
    - [x] {:medium/74/74:* Search a 2D Matrix}[Search a 2D Matrix]
    - [x] {:medium/240/240:* Search a 2D Matrix II}[Search a 2D Matrix II]
    - [ ] {:medium/875/875:* Koko Eating Bananas}[Koko Eating Bananas]
    - [ ] {:medium/33/33:* Search in Rotated Sorted Array}[# Search in Rotated Sorted Array]
    - [x] {:medium/81/81:* Search Rotated Sorted Array II}[Search Rotated Sorted Array II]
    - [ ] {:medium/153/153:* Find Minimum in Rotated Sorted Array}[Find Minimum in Rotated Sorted Array]
    - [x] {:medium/981/981:* Time Based Key-Value Store}[Time Based Key-Value Store] 
    - [-] {:medium/162/162:* Find a Peak Element}[Find a Peak Element]
    - [-] {:medium/1901/1901:* Find a Peak Element II}[Find a Peak Element II]

*** Linked List
    - [x] {:easy/206/206:* Reverse Linked List}[Reverse Linked List]
    - [ ] {:easy/21/21:* Merge Two Sorted Lists}[Merge Two Sorted Lists]
    - [x] {:medium/143/143:* Reorder List}[Reorder List]
    - [x] {:easy/160/160:* Intersection of Two Linked Lists}[Intersection of Two Linked Lists]
    - [-] {:medium/19/19:* Rename Nth Node From End of List}[Rename Nth Node From End of List]
    - [x] {:medium/2/2:* Add Two Numbers}[Add Two Numbers]
    - [x] {:easy/141/141:* Linked List Cycle}[Linked List Cycle]
    - [x] {:medium/287/287:* Find the Duplicate Number}[Find the Duplicate Number] 
    - [x] {:medium/146/146:* LRU Cache}[LRU Cache]
    - [x] {:easy/83/83:* Remove Duplicates from Sorted List}[Remove Duplicates from Sorted List]
    - [x] {:medium/86/86:* Partition List}[Partition List]
    - [x] {:medium/138/138:* Copy List with Random Pointer}[Copy List with Random Pointer]
    - [x] {:medium/147/147:* Insertion Sort List}[Insertion Sort List]
    - [x] {:medium/2181/2181:* Merge Nodes in Between Zeros}[Merge Nodes in Between Zeros]
    - [x] {:easy/234/234:* Palindrome Linked List}[Palindrome Linked List]
    - [x] {:medium/148/148:* Sort List}[Sort List]
    - [x] {:hard/23/23:* Merge k Sorted Lists}[Merge k Sorted Lists]
    - [x] {:medium/24/24:* Swap Nodes in Pairs}[Swap Nodes in Pairs]
    - [x] {:medium/237/237:* Delete Node in a Linked List}[Delete Node in a Linked List]
    - [x] {:medium/2095/2095:* Delete the Middle Node of a Linked List}[Delete the Middle Node of a Linked List]

*** Tree
    - [x] {:easy/144/144:* Binary Tree Preorder Traversal}[Binary Tree Preorder Traversal]
    - [x] {:easy/145/145:* Binary Tree Postorder Traversal}[Binary Tree Postorder Traversal]
    - [x] {:easy/226/225:* Invert Binary Tree}[Invert Binary Tree]
    - [ ] {:easy/104/104:* Maximum Depth of Binary Tree}[Maximum Depth of Binary Tree]
    - [ ] {:easy/110/110:* Balanced Binary Tree}[Balanced Binary Tree]
    - [ ] {:easy/572/572:* Subtree of Another Tree}[Subtree of Another Tree]
    - [x] {:easy/235/235:* Lowest Common Ancestor of a Binary Search Tree}[Lowest Common Ancestor of a Binary Search Tree]
    - [x] {:medium/102/102:* Binary Tree Level Order Traversal}[Binary Tree Level Order Traversal]
    - [x] {:medium/199/199:* Binary Tree Right Side View}[Binary Tree Right Side View]
    - [x] {:medium/1448/1448:* Count Good Nodes in Binary Tree}[Count Good Nodes in Binary Tree]
    - [x] {:medium/230/230:* Kth Smallest Element in a BST}[Kth Smallest Element in a BST]
    - [x] {:medium/1161/1161:* Maximum Level Sum of a Binary Tree}[Maximum Level Sum of a Binary Tree]
    - [x] {:medium/114/114:* Flatten Binary Tree to Linked List}[Flatten Binary Tree to Linked List]
    - [x] {:medium/814/814:* Binary Tree Pruning}[Binary Tree Pruning]
    - [x] {:easy/543/543:* Diameter of Binary Tree}[Diameter of Binary Tree]
    - [-] {:medium/105/105:* Construct Binary Tree from Preorder and Inorder Traversal}[Construct Binary Tree from Preorder and Inorder Traversal]
    - [-] {:medium/1448/1448:* Count Good Nodes in Binary Tree}[Count Good Nodes in Binary Tree]
    - [x] {:easy/108/108:* Convert Sorted Array to Binary Search Tree}[Convert Sorted Array to Binary Search Tree]
    - [x] {:medium/109/109:* Convert Sorted List to Binary Search Tree}[Convert Sorted List to Binary Search Tree]
    - [x] {:medium/2196/2196:* Create Binary Tree From Descriptions}[Create Binary Tree From Descriptions]
    - [x] {:medium/129/129:* Sum Root to Leaf Numbers}[Sum Root to Leaf Numbers]
    - [x] {:medium/173/173:* Binary Search Tree Iterator}[Binary Search Tree Iterator]
    - [x] {:medium/98/98:* Validate Binary Search Tree}[Validate Binary Search Tree]
    - [x] {:medium/116/116:* Populating Next Right Pointers in Each Node}[Populating Next Right Pointers in Each Node]
    - [x] {:medium/117/117:* Populating Next Right Pointers in Each Node II}[Populating Next Right Pointers in Each Node II]
    - [-] {:medium/654/654:* Maximum Binary Tree}[Maximum Binary Tree] 
    - [x] {:easy/101/101:* Symmetric Tree}[Symmetric Tree]
    - [x] {:medium/113/113:* Path Sum II}[Path Sum II]
    - [ ] {:medium/236/236:* Lowest Common Ancestor of a Binary Tree}[Lowest Common Ancestor of a Binary Tree]
    - [-] {:medium/1123/1123:* Lowest Common Ancestor of Deepest Leaves}[Lowest Common Ancestor of Deepest Leaves]
    - [x] {:medium/426/426:* Convert Binary Search Tree to Sorted Doubly Linked List}[Convert Binary Search Tree to Sorted Doubly Linked List]
    - [x] {:medium/1302/1302:* Deepest Leaves Sum}[Deepest Leaves Sum]
    - [x] {:easy/637/637:* Average Levels of Levels in Binary Tree}[Average Levels of Levels in Binary Tree]
    - [x] {:medium/429/429:* N-ary Tree Level Order Traversal}[N-ary Tree Level Order Traversal]
    - [x] {:easy/606/606:* Construct String from Binary Tree}[Construct String from Binary Tree]
    - [x] {:medium/1457/1457:* Pseudo-Palindromic Paths in a Binary Tree}[Pseudo-Palindromic Paths in a Binary Tree]
    - [-] {:medium/96/96:* Unique Binary Search Trees}[Unique Binary Search Trees]
    - [x] {:medium/107/107:* Binary Tree Level Order Traversal II}[Binary Tree Level Order Traversal II]

*** Trie
    - [ ] {:medium/208/208:* Implement Trie (Prefix Tree)}[Implement Trie (Prefix Tree)]

*** Heap/Priority Queue
    - [x] {:easy/703/703:* Kth Largest Element in an Stream}[Kth Largest Element in an Stream]
    - [x] {:easy/1046/1046:* Last Stone Weight}[Last Stone Weight]
    - [x] {:medium/973/973:* K Closest Points to the Origin}[K Closest Points to the Origin]
    - [x] {:medium/215/215:* Kth Largest Element in an Array}[Kth Largest Element in an Array]
    - [x] {:medium/870/870:* Advantage Shuffle}[Advantage Shuffle]
    - [x] {:medium/658/658:* Find K Closest Elements}[Find K Closest Elements]

*** Backtracking
    - [x] {:medium/78/78:* Subsets}[Subsets]
    - [x] {:medium/39/39:* Combination Sum}[Combination Sum]
    - [x] {:medium/46/46:* Permutation}[Permutation]
    - [x] {:47:* Permutations II}[Permutations II]
    - [x] {:medium/90/90:* Subsets II}[Subsets II]
    - [x] {:medium/40/40:* Combination Sum II}[Combination Sum II]
    - [x] {:medium/216/216:* Combination Sum III}[Combination Sum III]
    - [ ] {:medium/131/131:* Palindrome Partitioning}[Palindrome Partitioning]
    - [x] {:medium/79/79:* Word Search}[Word Search]
    - [x] {:medium/17/17:* Letter Combinations of a Phone Number}[Letter Combinations of a Phone Number]
    - [x] {:medium/491/491:* Increasing Subsequences}[Increasing Subsequences]
    - [x] {:medium/869/869:* Reordered Power of 2}[Reordered Power of 2]
    - [x] {:medium/797/797:* All Paths From Source to Target}[All Paths From Source to Target]
    - [x] {:medium/1079/1079:* Letter Tile Possibilities}[Letter Tile Possibilities]
    - [x] {:medium/1415/1415:* The k-th Lexicographical String of All Happy Strings of Length n}[The k-th Lexicographical String of All Happy Strings of Length n]
    - [x] {:medium/967/967:* Numbers With Same Consecutive Differences}[Numbers With Same Consecutive Differences]
    - [x] {:medium/784/784:* Letter Case Permutation}[Letter Case Permutation]
    - [x] {:medium/1219/1219:* Path with Maximum Gold}[Path with Maximum Gold]
    - [x] {:medium/241/241:* Different Ways to Add Parentheses}[Different Ways to Add Parentheses]
    - [x] {:medium/1593/1593:* Split a String Into the Max Number of Unique Substrings}[Split a String Into the Max Number of Unique Substrings]
    - [x] {:easy/1995/1995:* Count Special Quadruplets}[Count Special Quadruplets]
    - [x] {:medium/2120/2120:* Execution of All Suffix Instructions Staying in a Grid}[Execution of All Suffix Instructions Staying in a Grid]

*** Graphs
    - [x] {:medium/200/200:* Number of Islands}[Number of Islands]
    - [x] {:medium/695/695:* Max Area of Island}[Max Area of Island]
    - [-] {:medium/417/417:* Pacific Atlantic Water Flow}[Pacific Atlantic Water Flow]
    - [x] {:medium/133/133:* Clone Graph}[Clone Graph]
    - [-] {:medium/130/130:* Surrounded Regions}[Surrounded Regions]
    - [-] {:medium/994/994:* Rotting Oranges}[Rotting Oranges]
    - [x] {:medium/286/286:* Walls and Gates}[Walls and Gates]
    - [x] {:medium/207/207:* Course Schedule}[Course Schedule]
    - [-] {:medium/210/210:* Course Schedule II}[Course Schedule II]

*** 1-D Dynamic Programming
    #contexts = [DP[i] = DP[i-1] + DP[i-2]]
    - [x] {:easy/509/509:* Fibonacci Number}[Fibonacci Number]
    - [x] {:easy/1137/1137:* N-th Tribonacci Number}[N-th Tribonacci Number]
    - [x] {:easy/1480/1480:* Running Sum of 1d Array}[Running Sum of 1d Array]
    - [x] {:easy/70/70:* Climbing Stairs}[Climbing Stairs]
    - [x] {:easy/746/746:* Min Cost Climbing Stairs}[Min Cost Climbing Stairs]
    - [x] {:medium/198/198:* House Robber}[House Robber]
    - [ ] {:medium/213/213:* House Robber II}[House Robber II]
    - [x] {:medium/5/5:* Longest Palindromic Substring}[Longest Palindromic Substring]
    - [-] {:medium/516/516:* Longest Palindromic Subsequence}[Longest Palindromic Subsequence]
    - [x] {:medium/647/647:* Palindromic Substrings}[Palindromic Substrings]
    - [ ] {:medium/91/91:* Decode Ways}[Decode Ways]
    - [ ] {:medium/322/322:* Coin Change}[Coin Change]
    - [x] {:medium/1423/1423:* Maxium Points You Can Obtain From Cards}[Maxium Points You Can Obtain From Cards] 
    - [ ] {:medium/152/152:* Maximum Product Subarray}[Maximum Product Subarray]
    - [x] {:easy/53/53:* Maximum Subarray}[Maximum Subarray]
    - [ ] {:medium/918/918:* Maximum Sum Circular Subarray}[Maximum Sum Circular Subarray]
    - [-] {:medium/416/416:* Partition Equal Subset Sum}[Partition Equal Subset Sum] 
    #contexts = [DP[i] = max(DP[i-1], DP[i-2] + nums[i])]
    - [x] {:medium/376/376:* Wiggle Subsequence}[Wiggle Subsequence] 
    - [x] {:medium/1029/1029:* Two City Scheduling}[Two City Scheduling]
    #contexts = [O(n^2) optimization, max of DP[i] + DP[j] ]
    - [-] {:medium/1014/1014:* Best Sightseeing Pair}[Best Sightseeing Pair] 
    - [ ] {:easy/121/121:* Best Time to Buy and Sell Stock}[Best Time to Buy and Sell Stock]
    - [ ] {:medium/122/122:* Best Time to Buy and Sell Stock II}[Best Time to Buy and Sell Stock II] 
    #contexts = [Caching]
    - [-] {:medium/309/309:* Best Time to Buy and Sell Stock with Cooldown}[Best Time to Buy and Sell Stock with Cooldown] 
    - [x] {:medium/714/714:* Best Time to Buy and Sell Stock with Transaction Fee}[Best Time to Buy and Sell Stock with Transaction Fee] 
    - [ ] {:medium/139/139:* Word Break}[# Word Break] 
    - [x] {:medium/1048/1048:* Longest String Chain}[Longest String Chain] 
    #contexts = [DP[i] = max(1, DP[i+1], ... DP[i+k])]
    - [-] {:medium/300/300:* Longest Increasing Subsequence}[Longest Increasing Subsequence] 
    - [ ] {:medium/823/823:* Binary Trees With Factors}[Binary Trees With Factors]
    - [x] {:medium/343/343:* Integer Break}[Integer Break]

*** 2-D Dynamic Programming
    - [x] {:medium/62/62:* Unique Paths }[Unique Paths] 
    - [x] {:medium/63/63:* Unique Paths II}[Unique Paths II] 
    - [-] {:medium/1143/1143:* Longest Common Subsequence}[Longest Common Subsequence] 
    - [x] {:medium/583/583:* Delete Operation for Two Strings}[Delete Operation for Two Strings]
    #contexts = [using two variable as key in cache]
    - [-] {:medium/518/518:* Coin Change 2}[Coin Change 2] 
    - [x] {:medium/494/494:* Target Sum}[Target Sum] 
    - [x] {:hard/115/115:* Distinct Subsequences}[Distinct Subsequences]
    - [-] {:medium/1654/1654:* Minimum Jumps to Reach Home}[Minimum Jumps to Reach Home]
    #contexts = [using multiple variable as key in cache]
    - [-] {:medium/97/97:* Interleaving String}[Interleaving String] 
    - [x] {:hard/123/123:* Best Time to Buy and Sell Stocks III}[Best Time to Buy and Sell Stocks III]
    - [x] {:hard/188/188:* Best Time to Buy and Sell Stock IV}[Best Time to Buy and Sell Stock IV]

*** Greedy
    - [x] {:easy/1710/1710:* Maximum Units on a Truck}[Maximum Units on a Truck] 
    - [x] {:medium/55/55:* Jump Game}[Jump Game]
    - [-] {:medium/45/45:* Jump Game II}[Jump Game II]
    - [-] {:medium/134/134:* Gas Station}[Gas Station]
    - [x] {:medium/1642/1642:* Furthest Building You Can Reach}[Furthest Building You Can Reach] 
    - [x] {:medium/846/846:* Hand of Straights}[Hand of Straights] 
    - [ ] {:medium/1899/1899:* Merge Triplets to Form Target Triplet}[Merge Triplets to Form Target Triplet] 
    - [-] {:medium/406/406:* Queue Reconstruction by Height}[Queue Reconstruction by Height] 
    - [x] {:medium/763/763:* Partition Labels}[Partition Labels] 
    - [-] {:medium/1647/1647:* Minimum Deletions to Make Character Frequencies Unique}[Minimum Deletions to Make Character Frequencies Unique]
    - [x] {:medium/1338/1338:* Reduce Array Size to The Half}[Reduce Array Size to The Half] 
    - [-] {:medium/948/948:* Bag of Tokens}[Bag of Tokens]
    - [-] {:medium/665/665:* Non-decreasing Array}[Non-decreasing Array]

*** Interval
    - [ ] {:medium/57/57:* Insert Interval}[Insert Interval]
    - [x] {:medium/56/56:* Merge Intervals}[Merge Intervals] 
    - [x] {:medium/729/792:* My Calendar I}[My Calendar I]
    - [x] {:easy/1893/1893:* Check if All the Integers in a Range are Covered}[Check if All the Integers in a Range are Covered]
    - [x] {:medium/2195/2195:* Append K Integers With Minimal Sum}[Append K Integers With Minimal Sum]

*** Math & Geometry
    - [x] {:easy/202/202:* Happy Number}[Happy Number]
    - [x] {:easy/1903/1903:* Largest Odd Number in String}[Largest Odd Number in String]
    - [x] {:medium/50/50:* Pow(x, n)}[Pow(x, n)]
    - [ ] {:easy/1332/1332:* Remove Palindromic Subsequences}[Remove Palindromic Subsequences]
    - [x] {:easy/263/263:* Ugly Number}[Ugly Number] 
    - [x] {:easy/118/118:* Pascal's Triangle}[Pascal's Triangle] 
    - [x] {:easy/119/119:* Pascal's Triangle II}[Pascal's Triangle II] 
    - [-] {:medium/453/453:* Minimum Moves to Equal Array Elements}[Minimum Moves to Equal Array Elements] 
    - [-] {:medium/215/215:* Kth Largest Element in an Array}[Kth Largest Element in an Array] 
    - [x] {:medium/48/48:* Rotate Image}[Rotate Image] 
    - [-] {:medium/786/786:* K-th Smallest Prime Fraction}[K-th Smallest Prime Fraction]
    - [x] {:medium/1689/1689:* Partitioning Into Minimum Number of Deci-Binary Numbers}[Partitioning Into Minimum Number of Deci-Binary Numbers]
    - [x] {:easy/326/326:* Power of Three}[Power of Three]
    - [ ] {:medium/264/264:* Ugly Number II}[Ugly Number II]
    - [-] {:medium/31/31:* Next Permutation}[Next Permutation]

*** Bit Manipulation
    - [x] {:easy/1290/1290:* Convert Binary Number in a Linked List to Integer}[Convert Binary Number in a Linked List to Integer]
    - [x] {:easy/191/191:* Number of 1 Bits}[Number of 1 Bits]
    - [x] {:medium/393/393:* UTF-8 Validation}[UTF-8 Validation]

*** Simulation
    - [x] {:medium/1441/1441:* Build a Array With Stack Operations}[Build a Array With Stack Operations]

** {:coding_interview🤺/index:* Coding Interview 🤺}[Coding Interview 🤺] 
