* Index

** Algorithm

*** Array and Hash
    - [x] {:easy/217/217:* Contains Duplicate}[# Contains Duplicate]
    - [x] {:easy/2255/2255:* Count Prefixes of a Given String}[# Count Prefixes of a Given String] 
    - [-] {:easy/1160/1160:* Find Words That Can be Formed Characters}[# Find Words That Can be Formed Characters] 
    - [x] {:easy/242/242:* Valid Anagram}[# Valid Anagram]
    - [-] {:easy/1/1:* Two Sum}[# Two Sum]
    - [-] {:medium/49/49:* Group Anagrams}[# Group Anagrams]
    - [-] {:medium/347/347:* Top K Frequent}[# Top K Frequent]
    - [-] {:medium/238/238:* Product of Array Except Self}[# Product of Array Except Self]
    - [-] {:medium/36/36:* Valid Sudoku}[# Valid Sudoku] 
    - [-] {:medium/271/271:* Encode and Decode Strings}[# Encode and Decode Strings] 
    - [-] {:medium/128/128:* Longest Consecutive Sequence}[# Longest Consecutive Sequence] 
    - [ ] {:easy/88/88:* Merge Sorted Array}[# Merge Sorted Array]
    - [x] {:medium/451/451:* Sort Characters By Frequency}[# Sort Characters By Frequency] 

*** 2D Array
    - [x] {:easy/867/867:* Transpose Matrix}[# Transpose Matrix]
    - [-] {:medium/304/304:* Range Sum Query 2D - Immutable}[# Range Sum Query 2D - Immutable]

*** Two Pointers
    - [-] {:easy/125/125:* Valid Palindrome}[# Valid Palindrome]
    - [-] {:medium/167/167:* Two Sum II - Input Array is Sorted}[# Two Sum II - Input Array is Sorted] 
    - [ ] {:medium/15/15:* Three Sum}[# Three Sum]
    - [-] {:medium/11/11:* Container With Most Water}[# Container With Most Water]
    - [x] {:hard/42/42:* Trapping Rain Water}[# Trapping Rain Water]

*** Sliding Window
    - [ ] {:medium/3/3:* Longest Substring Without Repeating Characters}[# Longest Substring Without Repeating Characters]
    - [ ] {:medium/424/424:* Longest Repeating Character Replacement}[# Longest Repeating Character Replacement]
    - [ ] {:medium/567/567:* Permutation in String}[# Permutation in String]
    - [ ] {:medium/1461/1461:* Check If a String Contains All Binary Codes of Size K}[# Check If a String Contains All Binary Codes of Size K]

*** Stack
    - [x] {:easy/20/20:* Valid Parentheses}[# Valid Parentheses]
    - [x] {:easy/155/155:* Min Stack}[# Min Stack]
    - [ ] {:medium/150/150:* Evaluate Reverse Polish Notation}[# Evaluate Reverse Polish Notation]
    - [x] {:medium/22/22:* Generate Parentheses}[# Generate Parentheses]
    - [-] {:739:* Daily Temeratures}[# Daily Temeratures]
    - [ ] {:medium/853/853:* Car Fleet}[# Car Fleet]

*** Sort
    #contexts = [pigeonhole sorting]
    - [x] {:medium/1465/1465:* Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts}[# Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts] 
    - [-] {:hard/164/164:* Maximum Gap}[# Maximum Gap] 

*** Binary Search
    - [x] {:easy/704/704:* Binary Search}[# Binary Search]
    - [x] {:medium/74/74:* Search a 2D Matrix}[# Search a 2D Matrix]
    - [ ] {:medium/875/875:* Koko Eating Bananas}[# Koko Eating Bananas]
    - [ ] {:medium/33/33:* Search in Rotated Sorted Array}[# Search in Rotated Sorted Array]
    - [ ] {:medium/153/153:* Find Minimum in Rotated Sorted Array}[# Find Minimum in Rotated Sorted Array]
    - [x] {:medium/981/981:* Time Based Key-Value Store}[# Time Based Key-Value Store] 

*** Linked List
    - [x] {:easy/206/206:* Reverse Linked List}[# Reverse Linked List]
    - [ ] {:easy/21/21:* Merge Two Sorted Lists}[# Merge Two Sorted Lists]
    - [x] {:medium/143/143:* Reorder List}[# Reorder List]
    - [x] {:easy/160/160:* Intersection of Two Linked Lists}[# Intersection of Two Linked Lists]
    - [-] {:medium/19/19:* Rename Nth Node From End of List}[# Rename Nth Node From End of List]
    - [x] {:medium/2/2:* Add Two Numbers}[# Add Two Numbers]
    - [x] {:easy/141/141:* Linked List Cycle}[# Linked List Cycle]
    - [x] {:medium/287/287:* Find the Duplicate Number}[# Find the Duplicate Number] 
    - [x] {:medium/146/146:* LRU Cache}[# LRU Cache]

*** Tree
    - [x] {:easy/226/225:* Invert Binary Tree}[# Invert Binary Tree]
    - [ ] {:easy/104/104:* Maximum Depth of Binary Tree}[# Maximum Depth of Binary Tree]
    - [ ] {:easy/110/110:* Balanced Binary Tree}[# Balanced Binary Tree]
    - [ ] {:easy/572/572:* Subtree of Another Tree}[# Subtree of Another Tree]
    - [x] {:easy/235/235:* Lowest Common Ancestor of a Binary Search Tree}[# Lowest Common Ancestor of a Binary Search Tree]
    - [x] {:medium/102/102:* Binary Tree Level Order Traversal}[# Binary Tree Level Order Traversal]
    - [x] {:medium/199/199:* Binary Tree Right Side View}[# Binary Tree Right Side View]
    - [x] {:medium/1448/1448:* Count Good Nodes in Binary Tree}[# Count Good Nodes in Binary Tree]
    - [x] {:medium/230/230:* Kth Smallest Element in a BST}[# Kth Smallest Element in a BST]

*** Trie
    - [ ] {:medium/208/208:* Implement Trie (Prefix Tree)}[# Implement Trie (Prefix Tree)]

*** Heap/Priority Queue
    - [x] {:easy/703/703:* Kth Largest Element in an Stream}[# Kth Largest Element in an Stream]
    - [x] {:easy/1046/1046:* Last Stone Weight}[# Last Stone Weight]
    - [x] {:medium/973/973:* K Closest Points to the Origin}[# K Closest Points to the Origin]
    - [x] {:medium/215/215:* Kth Largest Element in an Array}[# Kth Largest Element in an Array]

*** Backtracking
    - [x] {:medium/78/78:* Subsets}[# Subsets]
    - [x] {:medium/39/39:* Combination Sum}[# Combination Sum]
    - [x] {:medium/46/46:* Permutation}[# Permutation]
    - [x] {:47:* Permutations II}[# Permutations II]
    - [x] {:medium/90/90:* Subsets II}[# Subsets II]
    - [ ] {:medium/40/40:* Combination Sum II}[# Combination Sum II]
    - [ ] {:medium/131/131:* Palindrome Partitioning}[# Palindrome Partitioning]
    - [x] {:medium/79/79:* Word Search}[# Word Search]
    - [x] {:medium/17/17:* Letter Combinations of a Phone Number}[# Letter Combinations of a Phone Number]

*** Graphs
    - [x] {:medium/200/200:* Number of Islands}[# Number of Islands]
    - [x] {:medium/695/695:* Max Area of Island}[# Max Area of Island]
    - [-] {:medium/417/417:* Pacific Atlantic Water Flow}[# Pacific Atlantic Water Flow]
    - [-] {:medium/130/130:* Surrounded Regions}[# Surrounded Regions]
    - [-] {:medium/994/994:* Rotting Oranges}[# Rotting Oranges]
    - [x] {:medium/286/286:* Walls and Gates}[# Walls and Gates]
    - [x] {:medium/207/207:* Course Schedule}[# Course Schedule]
    - [-] {:medium/210/210:* Course Schedule II}[# Course Schedule II]

*** 1-D Dynamic Programming
    #contexts = [DP[i] = DP[i-1] + DP[i-2]]
    - [x] {:easy/509/509:* Fibonacci Number}[# Fibonacci Number]
    - [x] {:easy/1137/1137:* N-th Tribonacci Number}[# N-th Tribonacci Number]
    - [x] {:easy/1480/1480:* Running Sum of 1d Array}[# Running Sum of 1d Array]
    - [x] {:easy/70/70:* Climbing Stairs}[# Climbing Stairs]
    - [x] {:easy/746/746:* Min Cost Climbing Stairs}[# Min Cost Climbing Stairs]
    - [x] {:medium/198/198:* House Robber}[# House Robber]
    - [ ] {:medium/213/213:* House Robber II}[# House Robber II]
    - [x] {:medium/5/5:* Longest Palindromic Substring}[# Longest Palindromic Substring]
    - [x] {:medium/647/647:* Palindromic Substrings}[# Palindromic Substrings]
    - [ ] {:medium/91/91:* Decode Ways}[# Decode Ways]
    - [ ] {:medium/322/322:* Coin Change}[# Coin Change]
    - [x] {:medium/1423/1423:* Maxium Points You Can Obtain From Cards}[# Maxium Points You Can Obtain From Cards] 
    - [ ] {:medium/152/152:* Maximum Product Subarray}[# Maximum Product Subarray]
    - [x] {:easy/53/53:* Maximum Subarray}[# Maximum Subarray]
    - [ ] {:medium/918/918:* Maximum Sum Circular Subarray}[# Maximum Sum Circular Subarray]
    - [-] {:medium/416/416:* Partition Equal Subset Sum}[# Partition Equal Subset Sum] 
    #contexts = [DP[i] = max(DP[i-1], DP[i-2] + nums[i])]
    - [x] {:medium/376/376:* Wiggle Subsequence}[# Wiggle Subsequence] 
    #contexts = [O(n^2) optimization, max of DP[i] + DP[j] ]
    - [-] {:medium/1014/1014:* Best Sightseeing Pair}[# Best Sightseeing Pair] 
    - [ ] {:easy/121/121:* Best Time to Buy and Sell Stock}[# Best Time to Buy and Sell Stock]
    - [ ] {:medium/122/122:* Best Time to Buy and Sell Stock II}[# Best Time to Buy and Sell Stock II] 
    #contexts = [Caching]
    - [-] {:medium/309/309:* Best Time to Buy and Sell Stock with Cooldown}[# Best Time to Buy and Sell Stock with Cooldown] 
    - [x] {:medium/714/714:* Best Time to Buy and Sell Stock with Transaction Fee}[# Best Time to Buy and Sell Stock with Transaction Fee] 
    - [ ] {:medium/139/139:* Word Break}[# Word Break] 
    - [x] {:medium/1048/1048:* Longest String Chain}[# Longest String Chain] 
    #contexts = [DP[i] = max(1, DP[i+1], ... DP[i+k])]
    - [-] {:medium/300/300:* Longest Increasing Subsequence}[# Longest Increasing Subsequence] 

*** 2-D Dynamic Programming
    - [x] {:medium/62/62:* Unique Paths }[# Unique Paths] 
    - [x] {:medium/63/63:* Unique Paths II}[# Unique Paths II] 

*** Greedy
    - [x] {:easy/1710/1710:* Maximum Units on a Truck}[# Maximum Units on a Truck] 
    - [x] {:medium/55/55:* Jump Game}[# Jump Game]
    - [-] {:medium/45/45:* Jump Game II}[# Jump Game II]
    - [-] {:medium/134/134:* Gas Station}[# Gas Station]
    - [x] {:medium/1642/1642:* Furthest Building You Can Reach}[# Furthest Building You Can Reach] 
    - [x] {:medium/846/846:* Hand of Straights}[# Hand of Straights] 
    - [ ] {:medium/1899/1899:* Merge Triplets to Form Target Triplet}[# Merge Triplets to Form Target Triplet] 
    - [-] {:medium/406/406:* Queue Reconstruction by Height}[# Queue Reconstruction by Height] 
    - [x] {:medium/763/763:* Partition Labels}[# Partition Labels] 

*** Interval
    - [ ] {:medium/57/57:* Insert Interval}[# Insert Interval]

*** Math & Geometry
    - [x] {:easy/202/202:* Happy Number}[# Happy Number]
    - [x] {:easy/1903/1903:* Largest Odd Number in String}[# Largest Odd Number in String]
    - [ ] {:medium/50/50:* Pow(x, n)}[# Pow(x, n)]
    - [ ] {:easy/1332/1332:* Remove Palindromic Subsequences}[# Remove Palindromic Subsequences]
    - [x] {:easy/263/263:* Ugly Number}[# Ugly Number] 
    - [x] {:easy/118/118:* Pascal's Triangle}[# Pascal's Triangle] 
    - [x] {:easy/119/119:* Pascal's Triangle II}[# Pascal's Triangle II] 
    - [-] {:medium/453/453:* Minimum Moves to Equal Array Elements}[# Minimum Moves to Equal Array Elements] 

*** Bit Manipulation
    - [x] {:easy/1290/1290:* Convert Binary Number in a Linked List to Integer}[# Convert Binary Number in a Linked List to Integer]
