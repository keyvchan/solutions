* Advantage Shuffle

** Note:
   - Advantage means `nums1[i] > nums2[i]`

** Tianji horse racing

*** Algorithm
    Use smallest node to match the largest node in the other array.
    - Use a Max heap to store nums2
    - Sort nums1
    - Check nums1 from largest to smallest:
    -- If `nums1[i] < heap.Pop()`,  which means we can't have advantage, so place the smallest in nums1.
    -- otherwise, we have advantage, so place the largest in nums1(Aka. current `nums1[i]`)

*** Complexity
    - Time: insert of nums2 is O(log(n)), so insert n times is O(nlogn), sort nums1 is O(nlogn)
    - Space: O(n)

*** Result
    - Runtime: 176 ms, faster than 75.00% of Go online submissions for Advantage Shuffle.
    - Memory Usage: 13.8 MB, less than 25.00% of Go online submissions for Advantage Shuffle.

*** Code
    - Go: {@ main.go}
