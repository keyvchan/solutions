* Furthest Building You Can Reach

** Brute Force

*** Algorithm
    The most naive way to solve this problem is to try all possible combinations of ways that filled the gap.
    Thinking of the gap as a tree, we can try to fill it in the following way:
    - When we have enough bricks, we can fill the gap with brick or ladder.
    - When we don't have enough bricks, we can fill the gap with only ladder.
    - When bricks run out, we can fill the gap with only ladder.
    - When bricks and ladders run out, we can't fill the gap, branch is cut off.

*** Complexity
    - Time: O(2^n)
    - Space: O(n)

*** Code
    - Go: {@ bf.go}

** Greedy (kind of)

*** Algorithm

    We can fill the gap with brick or ladder, so we try to fill the gap with brick first, but keep tracking the largest gap we filled using bricks. 
    When bricks run out, we can take the bricks that we filled in the previous largest gap and filled it with ladder instead. 
    With the operation above, we now have enough bricks to fill the gap.

*** Complexity
    - Time: O(n), but insert gap into heap takes O(log n)
    - Space: O(n)

*** Result
    - Runtime: 173 ms, faster than 23.68% of Go online submissions for Furthest Building You Can Reach.
    - Memory Usage: 22.3 MB, less than 5.26% of Go online submissions for Furthest Building You Can Reach.

*** Code
    - Go: {@ main.go}


