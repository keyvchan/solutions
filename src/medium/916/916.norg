* Word Subsets

** Brute Force

*** Algorithm
    - For each word in the words1, check if it is universal
    - If it is, add it to the result

*** Complexity
    - Time: O(n*m)
    - Space: O(n)

** Reduce words2 to one

*** Algorithm
    Noticed that we need to check if all words in words2 is a subset of words1.
    Which means all word in words2 shoule be a subset of word1.
    Which means all letters frequency in word2 should be less than or equal to the frequency in words1.
    Which means the max frequency of letters in word2 should be less than or equal to the frequency of letters in word1.

*** Complexity
    - Time: O(m+n)
    - Space: O(1)

*** Result
    - Runtime: 221 ms, faster than 5.88% of Go online submissions for Word Subsets.
    - Memory Usage: 8.4 MB, less than 17.65% of Go online submissions for Word Subsets.

*** Code
    - Go: {@ main.go}
