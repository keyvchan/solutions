* Two Sum

** Initial Thoughts(simi-brutle-force)

   Take a num, check target - num in the reset.

   Runtime: 28 ms, faster than 31.31% of Go online submissions for Two Sum.
   Memory Usage: 3.5 MB, less than 90.20% of Go online submissions for Two Sum.

   @code go
   func twoSum(nums []int, target int) []int {
     for i, num := range nums {
       for j, num2 := range nums[i+1:] {
         if num+num2 == target {
           return []int{i, i + j + 1}
         }
       }
     }
     return []int{0, 0}
   }
   @end


** Hash Map

   Use hash map to store num and its index, check `target-sum` in the hash map.

   Runtime: 5 ms, faster than 82.72% of Go online submissions for Two Sum.
   Memory Usage: 4.2 MB, less than 52.09% of Go online submissions for Two Sum.

   @code go
   func twoSum(nums []int, target int) []int {
     m := make(map[int]int)
     for i, v := range nums {
       if j, ok := m[target-v]; ok {
         return []int{j, i}
       }
       m[v] = i
     }
     return []int{}
   }
   @end
