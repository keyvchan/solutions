* Result

** First Thought(Sort + check adjacent)

   Sort the array, then check adjacent.

   Runtime: 106 ms, faster than 37.28% of Go online submissions for Contains Duplicate.
   Memory Usage: 8.5 MB, less than 87.68% of Go online submissions for Contains Duplicate.

   @code go
   func containsDuplicate(nums []int) bool {
     sort.Ints(nums)

     // make sure last not equal to first
     last := nums[0] - 1
     for _, num := range nums {
       if last == num {
         return true
       }
       last = num
     }

     return false
   }
   @end

** Hash set and count

   Use Hash map to store the num, query if exist on insert.

   Runtime: 101 ms, faster than 43.23% of Go online submissions for Contains Duplicate.
   Memory Usage: 9 MB, less than 47.16% of Go online submissions for Contains Duplicate.

   @code go
   func containsDuplicate(nums []int) bool {

	set := map[int]bool{}

	for _, v := range nums {
		if _, ok := set[v]; ok {
			return true
		}
		set[v] = true
	}

	return false
   }
   @end
