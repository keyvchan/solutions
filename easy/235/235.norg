* Lowest Common Ancestor of a Binary Search Tree

** Search

*** Algorithm
    Noticed that the tree is a binary search tree, so we can determine the search direction by `p.Val`, `q.Val` and `root.Val`.

    Cases:
    - `p.Val < root.Val` and `q.Val < root.Val`: search left subtree
    - `p.Val > root.Val` and `q.Val > root.Val`: search right subtree
    - Any other case: `root` is the LCA

*** Complexity
    - Time: O(log(n))
    - Space: O(1)

*** Result
    - Runtime: 32 ms, faster than 20.93% of Go online submissions for Lowest Common Ancestor of a Binary Search Tree.
    - Memory Usage: 7.1 MB, less than 65.28% of Go online submissions for Lowest Common Ancestor of a Binary Search Tree.

*** Code
    - Go: {@ main.go}[main.go]
